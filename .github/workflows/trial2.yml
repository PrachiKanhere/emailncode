
on: push

jobs:
  job1:
    runs-on: windows-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test}}
      output2: ${{ steps.step2.outputs.test}}
    steps:
      - name: checkout
        uses: actions/checkout@v2.4.2
        
      - name: taking build result
        id: step2
        run: |
          $build_result = "FAILURE"
          echo "::set-output name=test::$build_result"
          
      - name: checkout
        uses: actions/checkout@v2.4.2
        
      - name: inputfile  
        id: step1
        run: |
          $abc = "Following Buses might be down:' '[intjmsbus,jmsbus, ysbus]"
          echo "::set-output name=test::$abc"
          
     
  Groovy-Script:
    runs-on: windows-latest
    needs: job1
    steps:
      - name: checkout
        uses: actions/checkout@v2.4.2
     
      - name : take file
        run: | 
          echo ${{needs.job1.outputs.output1}}
          echo ${{needs.job1.outputs.output1}} > abc1.txt
           
      - name: setup Python
        uses: actions/setup-python@v3
        
      - name: install dependencies
        run : python -m pip install pytz
        
      - name: run py script
        run: |
          $output = python .github/workflows/Timestamp.py
          echo "::set-output name=TIMESTAMP::$output"
        id: step1
        
           
      - name: run py script
        run: |
          $output = python .github/workflows/date.py
          echo "::set-output name=formatteddate::$output"
        id: step2
      
        
        
      - name: run py script
        run: |
          $output = python .github/workflows/down_bus_check.py
          echo "::set-output name=DOWN_BUS::$output"
        id: step3
      
          
      - name: Print op
        run: |
          echo "${{steps.step1.outputs.TIMESTAMP}}"
          echo "${{steps.step2.outputs.formatteddate}}"
          echo "${{steps.step3.outputs.DOWN_BUS}}"
          
      - name: get hour
        run: |
          $hour = python .github/workflows/hour.py
          echo "::set-output name=Hour::$hour"
        id: step4
          
      - name: Print op
        run: |
          echo "${{steps.step4.outputs.Hour}}"
          
      - name: it has exceeded threshold limit for msg plz take action send mail 
        run: |
          echo "${{needs.job1.outputs.output2}}"
            # && log string ==it has exceeded threshold limit for msg plz take action (check on if case)
            # ((${{steps.step4.outputs.Hour}} < '3') && ( ${{steps.step4.outputs.Hour}} >= '1' ) && 
          echo "sending mail"
        
  
